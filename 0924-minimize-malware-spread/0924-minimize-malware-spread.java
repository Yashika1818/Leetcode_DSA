class Solution {
    public int[] size;
    public int[] parent;
    public int minMalwareSpread(int[][] graph, int[] initial) {
        size=new int[graph.length];
        Arrays.fill(size,1);
        parent=new int[graph.length];
        for(int i=0;i<graph.length;i++){
            parent[i]=i;
        }
        for(int i=0;i<graph.length;i++){
            for(int j=i+1;j<graph[i].length;j++){
               if(graph[i][j]==1) union(i,j,graph);
            }
        }
        int[] count=new int[graph.length];
        
        for(int i:initial){
            count[find(i)]++;
        }
   
        int max=0,m=0,ansNode=initial[0];
        for(int i:initial){
            int x=find(i);
            if(count[x]==1){
                m=size[x];
            }else{
                m=0;
            }
            if(m > max || (m==max && i<ansNode)){
                max=m;
                ansNode=i;
            }
        }

        return ansNode;
    }
    public void union(int i,int j,int[][] graph){
        int pi=find(i);
        int pj=find(j);
        if(pi==pj)return;
        if(size[pi]>=size[pj]){
            size[pi]+=size[pj];
            size[pj]=0;
            parent[pj]=pi;
        }else {
            size[pj]+=size[pi];
            size[pi]=0;
            parent[pi]=pj;
        }
        
            
    }
    public int find(int x){
        if(x==parent[x])return x;
        else
            return parent[x]=find(parent[x]);
    }
}