class Solution {
    int[] parent;
    int[] size;
    public int minMalwareSpread(int[][] graph, int[] initial) {
        parent=new int[graph.length];
        size=new int[graph.length];
        for(int i=0;i<graph.length;i++){
            parent[i]=i;
            size[i]=1;
        }
        for(int i=0;i<graph.length;i++){    
            for(int j=0;j<graph.length;j++){
                if(i!=j && graph[i][j]==1)
                    unionHelper(i,j);
            }
        }
        int[] map=new int[graph.length];
        for(int i:initial){
            int root=find(i);
            map[root]++;
        }
        // for(int i=0;i<graph.length;i++){
        //     System.out.println(map[i]);
        // }
        Arrays.sort(initial);
        int ans_size=0;
        int ans_i=initial[0];
        for(int i:initial){
            int root=find(i);
            if(map[root]==1){
                if(ans_size<size[root]){
                    ans_size=size[root];
                    ans_i=i;
                }
            }
        }
        return ans_i;
        
        
    }
    public void unionHelper(int x,int y){
        int X=find(x);
        int Y=find(y);
        if(X!=Y){
        if(size[X]>size[Y]){
            parent[Y]=X;
            size[X] +=size[Y];
        }else {
            parent[X]=Y;
            size[Y]+=size[X];
        }
        }
    }
    public int find(int x){
        if(parent[x]==x)return x;
        else{
            parent[x]=find(parent[x]);
            return parent[x];
        }
    }
}